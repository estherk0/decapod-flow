apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: prepare-manifest
spec:
  entrypoint: startpoint
  arguments:
    parameters:
    - name: base_yaml_url
      value: "https://github.com/openinfradev/decapod-base-yaml.git"
    - name: base_yaml_tag
      value: "main"
    - name: site_yaml_url
      value: "https://github.com/openinfradev/decapod-site.git"
    - name: site_yaml_tag
      value: "main"
    - name: git_username
      value: ""
    - name: git_password
      value: ""
    - name: site_name
      value: "hanu-deploy-apps"
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Mi
      storageClassName: taco-storage
  templates:
  - name: startpoint
    steps:
    - - name: "render"
        template: render-site-yaml
        arguments:
          parameters:
          - { name: base_yaml_url, value: "{{workflow.parameters.base_yaml_url}}" }
          - { name: base_yaml_tag, value: "{{workflow.parameters.base_yaml_tag}}" }
          - { name: site_yaml_url, value: "{{workflow.parameters.site_yaml_url}}" }
          - { name: site_yaml_tag, value: "{{workflow.parameters.site_yaml_tag}}" }
          - { name: git_username, value: "{{workflow.parameters.git_username}}" }
          - { name: git_password, value: "{{workflow.parameters.git_password}}" }
          - { name: site_name, value: "{{workflow.parameters.site_name}}" }
    - - name: "update"
        template: update-manifest-configmap
        arguments:
          parameters:
          - { name: site_name, value: "{{workflow.parameters.site_name}}" }

  - name: render-site-yaml
    inputs:
      parameters:
      - name: base_yaml_url
      - name: base_yaml_tag
      - name: site_yaml_url
      - name: site_yaml_tag
      - name: git_username
      - name: git_password
      - name: site_name
    container:
      name: 'render'
      image: sktdev/decapod-kustomize:latest
      command:
      - /bin/bash
      - -c
      - |
        set -e
        cd /mnt/workdir
        if [[ "${GIT_USERNAME}" != "" ]] && [[ "${GIT_PASSWORD}" != "" ]]; then
          CLONE_URL=$(echo $SITE_YAML_URL | sed 's/\/\//\/\/'"$GIT_USERNAME"':'"$GIT_PASSWORD"'@/')
        else
          CLONE_URL=$SITE_YAML_URL
        fi

        # Clone base-yaml, site-yaml 
        git clone -b $SITE_YAML_TAG $CLONE_URL site-yaml
        git clone -b $BASE_YAML_TAG $BASE_YAML_URL base-yaml && cd site-yaml
        if [ $? -ne 0 ]; then
          exit $?
        fi

        for APP_NAME in `ls $SITE_NAME | grep -v docs | sed 's/\///'`
        do
          SITE_PATH="$SITE_NAME/$APP_NAME"
          if [ ! -d "$SITE_PATH" ]; then
            echo "[INFO] $APP_NAME of $SITE_NAME is not exist"
            exit 1
          fi

          echo "[INFO] Try to render $APP_NAME for $SITE_NAME site"
          cp -r ../base-yaml/$APP_NAME/base $SITE_NAME/
          OUTPUT_PATH="$SITE_NAME/$APP_NAME/$APP_NAME-manifest.yaml"

          echo "[INFO] Rendering $APP_NAME-manifest.yaml"
          kustomize build --enable_alpha_plugins $SITE_PATH -o $OUTPUT_PATH

          if [ $? -ne 0 ]; then
            echo "[ERROR] kustomize build error"
            exit $?
          fi

          if [ -f "$OUTPUT_PATH" ]; then
            echo "[INFO] Successfully Completed!"
          else
            echo "[INFO] Failed to render $APP_NAME-manifest.yaml"
            exit 1
          fi
          rm -rf $SITE_NAME/base
        done
      env:
      - name: BASE_YAML_URL 
        value: "{{inputs.parameters.base_yaml_url}}"
      - name: BASE_YAML_TAG
        value: "{{inputs.parameters.base_yaml_tag}}"
      - name: SITE_YAML_URL
        value: "{{inputs.parameters.site_yaml_url}}"
      - name: SITE_YAML_TAG
        value: "{{inputs.parameters.site_yaml_tag}}"
      - name: GIT_USERNAME
        value: "{{inputs.parameters.git_username}}"
      - name: GIT_PASSWORD
        value: "{{inputs.parameters.git_password}}"
      - name: SITE_NAME
        value: "{{inputs.parameters.site_name}}"
      volumeMounts:
      - name: workdir
        mountPath: /mnt/workdir

  - name: update-manifest-configmap
    inputs:
      parameters:
      - name: site_name
    container:
      name: 'update'
      image: k8s.gcr.io/hyperkube:v1.17.6
      command:
      - /bin/bash
      - -c
      - |
        set -xe
        cd /mnt/workdir
        find . -regex ".*$SITE_NAME.*\/.*-manifest.yaml" | while read -r path ; do
          echo $path
          NAME=$(echo $path | sed -E 's/.*\/(.*)-manifest.yaml/\1/')
          kubectl create configmap "$NAME" --from-file=$path --dry-run -oyaml | kubectl apply -f-
        done 
      env:
      - name: SITE_NAME
        value: "{{inputs.parameters.site_name}}"
      volumeMounts:
      - name: workdir
        mountPath: /mnt/workdir

